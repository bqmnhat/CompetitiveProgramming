#include <iostream>
#include <bits/stdc++.h>
using namespace std;
typedef unsigned long long ll;
typedef __int128 i128;
int t;
ll n;
bool Sieve[1000001];
vector<ll> primes;
unordered_set<ll> AvailableNums;

// Case n is prime: Miller-Rabin

i128 FastPow(i128 x, i128 e, i128 Mod) {
    i128 ans = 1;
    while (e > 0) {
        if (e&i128(1))
            ans = (ans*x)%Mod;
        x = (x*x)%Mod;
        e >>= i128(1);
    }
    return ans;
}

bool MillerTest(i128 d, i128 n) {
    srand((unsigned) time(NULL));
    i128 a = 2 + rand()%(n-4);
    i128 x = FastPow(a, d, n);
    if ((x == 1) || (x == n-i128(i)))
        return true;
    while (d != n-i128(1)) {
        x = i128(x*x)%n;
        d *= 2;
        if (x == n-i128(1))
            return true;
    }
    return false;
}

bool IsPrime(i128 n, int k = 10)
{
    if (n <= 1 || n == 4)  return false;
    if (n <= 3) return true;
    i128 d = n - 1;
    while (d % 2 == 0)
        d /= 2;
    for (int i = 0; i < k; i++)
         if (!MillerTest(d, n))
              return false;
    return true;
}

// Case == 2 pis: Find the smaller one which is <= sqrt(n). Distance between 2 primes <= 300 => Fast to just find 1

ll NxtPrimes(ll n) {
    if (n <= 2)
        return 2;
    if (!(n&1))
        n++;
    while (!IsPrime(n))
        n += 2;
    return n;
}

// Case >= 3 pis: Generate a sieve which stores all numbers with such properties

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> t;
    return 0;
}
